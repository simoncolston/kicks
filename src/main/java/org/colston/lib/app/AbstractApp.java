package org.colston.lib.app;

import java.io.BufferedWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Properties;
import java.util.logging.LogManager;

public abstract class AbstractApp {

    protected Path configDir;

    /**
     * Provides a simple name for the application.
     * @return application name
     */
    protected abstract String getApplicationName();

    /**
     * Called in the {@code main()} method of the app to configure basic functionalities.
     * @throws Exception error during configure
     */
    protected void configure() throws Exception {
        configureConfigDir();
        configureLogging();
    }

    /**
     * Create the config directory from the application name.
     * @throws IOException error creating the directory
     */
    protected void configureConfigDir() throws IOException {
        configDir = Path.of(System.getProperty("user.home"), getConfigDirName());
        try {
            Files.createDirectories(configDir);
        } catch (IOException e) {
            // no logging available yet so output something
            e.printStackTrace();
            throw e;
        }
    }

    public Path getConfigDir() {
        return configDir;
    }

    protected String getConfigDirName() {
        return "." + getApplicationName();
    }

    /**
     * Configures logging.  Looks for {@code logging.properties} in the config directory and uses that.
     * If it does not exist then one is generated with some sensible defaults.
     * @throws Exception error reading a writing properties
     */
    protected void configureLogging() throws Exception {
        try {
            Path loggingPropertiesFile = getConfigDir().resolve("logging.properties");
            if (Files.notExists(loggingPropertiesFile)) {
                Properties ps = new Properties();
                ps.setProperty("handlers", "java.util.logging.FileHandler, java.util.logging.ConsoleHandler");
                ps.setProperty(".level", "INFO");
                ps.setProperty("java.util.logging.ConsoleHandler.level", "ALL");
                ps.setProperty("java.util.logging.ConsoleHandler.formatter", "java.util.logging.SimpleFormatter");
                ps.setProperty("java.util.logging.FileHandler.level", "ALL");
                ps.setProperty("java.util.logging.FileHandler.formatter", "java.util.logging.SimpleFormatter");
                ps.setProperty("java.util.logging.FileHandler.limit", "0");
                ps.setProperty("java.util.logging.FileHandler.count", "1");
                ps.setProperty("java.util.logging.FileHandler.pattern", "%h/" + getConfigDirName() + "/log/app.log");
                ps.setProperty("java.util.logging.FileHandler.append", "true");
                ps.setProperty("java.util.logging.SimpleFormatter.format", "%1$tF %1$tT [%4$s] %5$s%6$s%n");

                try (BufferedWriter w = Files.newBufferedWriter(loggingPropertiesFile)) {
                    ps.store(w, "Generated by " + getApplicationName());
                }

                //create directory for log files
                Files.createDirectories(getConfigDir().resolve("log"));
            }
            System.setProperty("java.util.logging.config.file", loggingPropertiesFile.toAbsolutePath().toString());
            LogManager.getLogManager().readConfiguration();
        } catch (SecurityException | IOException e) {
            // no logging available so print something
            e.printStackTrace();
            throw e;
        }
    }
}
